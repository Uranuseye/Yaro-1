<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/lval.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync?: boolean | null,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(unfinished: Undone<N.AnyExport>) {\n      const node = super.parseExport(unfinished);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = {\n  [name: string]: TokenType;\n};\n\nexport const tt: InternalTokenTypes = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let containsInvalid = false;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      let escaped;\n      ({\n        ch: escaped,\n        pos,\n        lineStart,\n        curLine,\n      } = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      ));\n      if (escaped === null) {\n        containsInvalid = true;\n      } else {\n        out += escaped;\n      }\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return { pos, str: out, containsInvalid, lineStart, curLine };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, containsInvalid, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        containsInvalid ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        containsInvalid ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(pos: number, loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(\n          startPos,\n          startLoc,\n        );\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context?: string | null, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(\n        startPos,\n        startLoc,\n      );\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startPos,\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name) &&\n      !this.hasImport(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  CannotFindName: ({ name }: { name: string }) => `Cannot find name '${name}'.`,\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): N.TsTypeReference | undefined | null {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(\n            startPos,\n            startLoc,\n          );\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression = this.startNodeAt<N.TsNonNullExpression>(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node = this.startNodeAt<N.TsAsExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: Undone<N.Node>): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      context?: string | null,\n      topLevel?: boolean | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          node as N.ClassDeclaration,\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context?: string | null): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startPos: number | null,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startPos?: number | null,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract takeDecorators(node: N.HasDecorators): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(\n          finishedNode,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startPos,\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startPos, startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode<N.Class>();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(\n      startPos,\n      startLoc,\n    );\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(\n        innerStartPos,\n        innerStartLoc,\n      );\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startPos,\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt<N.ParenthesizedExpression>(\n      startPos,\n      startLoc,\n    );\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startPos: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(\n    node: N.BodilessFunctionOrMethodBase,\n    isAsync?: boolean | null,\n  ): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(\n    this: Parser,\n    startPos: number,\n    startLoc: Position,\n  ): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(\n        startPos,\n        startLoc,\n      );\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(\n        startPos,\n        startLoc,\n      );\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    return this.finishNode(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context?: string | null): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context?: string | null): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean,\n  ): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean | null,\n  ): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !context,\n        );\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node as Undone<N.ClassDeclaration>, true);\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !context,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        context,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    context?: string | null,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\",\n  ): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    statement: number = FUNC_NO_FLAGS,\n    isAsync: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(\n        node as Undone<N.ExportNamedDeclaration>,\n        true,\n        false,\n        !!(node as Undone<N.ExportNamedDeclaration>).source,\n      );\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      (node as Undone<N.ExportDefaultDeclaration>).declaration =\n        this.parseExportDefaultExpression();\n      this.checkExport(node as Undone<N.ExportDefaultDeclaration>, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr as Undone<N.FunctionExpression>,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    return this.parseStatement(null) as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","SourceTypeModuleError","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","toMessage","_excluded","loc","details","SyntaxError","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","_excluded2","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","containsInvalid","chunkStart","unterminated","isStringEnd","escaped","readEscapedChar","str","inTemplate","throwOnInvalid","res","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","directiveLiteral","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","initNode","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}
=======
{"version":3,"file":"index.js","sources":["../src/parser/base.js","../src/parser/comments.js","../src/parser/error-codes.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/tokenizer/types.js","../src/util/location.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/util/whitespace.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/util/production-parameter.js","../src/parser/util.js","../src/parser/node.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    IncompatibleRegExpUVFlags:\n      \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\nimport { type Node } from \"../types\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype Origin = {| node: Node |} | {| at: Position |};\n\ntype SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"placeholders\"\n  | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (ErrorTemplate, Origin, ...any) => void;\nexport type ErrorData = {| message: ErrorTemplate, loc: Position |};\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  raise(\n    { code, reasonCode, template }: ErrorTemplate,\n    origin: Origin,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(\n      origin.node ? origin.node.loc.start : origin.at,\n      { code, reasonCode },\n      template,\n      ...params,\n    );\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    loc: Position,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    loc: Position,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const pos = loc.index;\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object, key) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  toUnenumerable(node.loc.start, \"index\");\n  toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.loc.end);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { node: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { node: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc?: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","// @flow\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(Errors.VarRedeclaration, { at: loc }, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ErrorData, ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorData> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (loc?: ?Position, type?: TokenType) => empty;\n  +expectPlugin: (name: string, loc?: Position) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(({ message, loc }) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(message, { at: loc }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      Errors.InvalidOrUnexpectedToken,\n      { at: this.state.curPosition() },\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(Errors.UnexpectedNumericSeparator, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(Errors.NumericSeparatorInEscapeSequence, {\n            at: this.state.curPosition(),\n          });\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(\n            Errors.InvalidDigit,\n            { at: this.state.curPosition() },\n            radix,\n          );\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(\n        Errors.InvalidDigit,\n        // Numeric literals can't have newlines, so this is safe to do.\n        { at: createPositionWithColumnOffset(startLoc, 2) },\n        radix,\n      );\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(Errors.InvalidCodePoint, { at: this.state.curPosition() });\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc,\n        });\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: createPositionWithColumnOffset(this.state.startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(message: ErrorTemplate, loc: Position) {\n    if (this.state.strict && !this.state.strictErrors.has(loc.index)) {\n      this.raise(message, { at: loc });\n    } else {\n      this.state.strictErrors.set(loc.index, { loc, message });\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            Errors.StrictNumericEscape,\n            // We immediately follow a \"\\\\\", and we're an 8 or a 9, so we must\n            // be on the same line.\n            createPositionWithColumnOffset(this.state.curPosition(), -1),\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          // We immediately follow a \"\\\\\", and we're something between 0 and 7,\n          // so we must be on the same line.\n          const codePos = createPositionWithColumnOffset(\n            this.state.curPosition(),\n            -1,\n          );\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(Errors.StrictNumericEscape, codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codeLoc = this.state.curPosition();\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(Errors.InvalidEscapeSequence, { at: codeLoc });\n      } else {\n        this.state.pos = codeLoc.index - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        Errors.InvalidEscapedReservedWord,\n        { at: this.state.startLoc },\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Position } from \"./location\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(Errors.PrivateNameRedeclaration, { at: loc }, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.raise(Errors.InvalidPrivateFieldResolution, { at: loc }, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorData, ErrorTemplate, raiseFunction } from \"../parser/error\";\nimport { Position } from \"./location\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, ErrorData> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(message: ErrorTemplate, loc: Position) {\n    this.errors.set(loc.index, { message, loc });\n  }\n  clearDeclarationError(loc: Position) {\n    this.errors.delete(loc.index);\n  }\n  iterateErrors(iterator: (data: ErrorData) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    loc: Position,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(template, { at: loc });\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(template, { at: loc });\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(template, loc);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(\n    template: ErrorTemplate,\n    loc: Position,\n  ): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(template, loc);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors(({ message, loc }) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(message, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(loc);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(\n    node: Node,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) {\n      if (template != null) {\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        throw this.raise(template, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: ?Position): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message,\n        },\n        { at: this.state.lastTokEndLoc },\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      );\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(loc?: ?Position, type?: ?TokenType): empty {\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(\n      {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template:\n          type != null\n            ? `Unexpected token, expected \"${tokenLabelName(type)}\"`\n            : \"Unexpected token\",\n      },\n      { at: loc != null ? loc : this.state.startLoc },\n    );\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, loc?: ?Position): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        loc != null ? loc : this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        this.state.startLoc,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: ?Position = null;\n  doubleProtoLoc: ?Position = null;\n  privateKeyLoc: ?Position = null;\n  optionalParametersLoc: ?Position = null;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(node: T, type: string, endLoc: Position): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", loc: Position, value: N.Node |}\n  | {| type: \"string\", loc: Position, value: N.Node |}\n  | {| type: \"boolean\", loc: Position, value: N.Node |}\n  | {| type: \"invalid\", loc: Position |}\n  | {| type: \"none\", loc: Position |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              node: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              node: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            FlowErrors.UnsupportedDeclareExportKind,\n            { at: this.state.startLoc },\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        { at: startLoc },\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: ?Position = null;\n        let inexactStartLoc: ?Position = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStartLoc: ?Position,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { node: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { node: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              node: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { node: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { node: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { node: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            node: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(\n          Errors.InvalidIdentifier,\n          { at: this.state.curPosition() },\n          fullWord,\n        );\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc?: ?Position,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            node: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { node: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.loc.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { node: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { node: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.loc.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { node: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { node: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { node: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              Errors.ImportBindingIsString,\n              { node: specifier },\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          node: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { node: typeParameters },\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          node: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { node: node.params[i] });\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        { at: loc },\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      loc: Position,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        { at: loc },\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      return this.raise(\n        explicitType === \"boolean\" ||\n          explicitType === \"number\" ||\n          explicitType === \"string\"\n          ? FlowErrors.EnumInvalidMemberInitializerPrimaryType\n          : explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerUnknownType,\n        { at: loc },\n        enumName,\n        memberName,\n        explicitType,\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumNumberMemberNotInitialized,\n        { at: loc },\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        { node },\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(\n            FlowErrors.EnumInvalidMemberName,\n            { node: id },\n            memberName,\n            // suggestion\n            memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          );\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(\n            FlowErrors.EnumDuplicateMemberName,\n            { node: id },\n            memberName,\n            enumName,\n          );\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.startLoc, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(\n              FlowErrors.EnumInconsistentMemberValues,\n              { at: nameLoc },\n              enumName,\n            );\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                {\n                  code: ErrorCodes.SyntaxError,\n                  reasonCode: \"UnexpectedToken\",\n                  template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n                },\n                { at: this.state.curPosition() },\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              node: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            node: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            JsxErrors.MissingClosingTagElement,\n            // $FlowIgnore\n            { node: closingElement },\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              JsxErrors.MissingClosingTagElement,\n              // $FlowIgnore\n              { node: closingElement },\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (loc, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(\n            TSErrors.InvalidModifiersOrder,\n            { at: loc },\n            before,\n            after,\n          );\n        }\n      };\n      const incompatible = (loc, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, { at: loc }, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc }, modifier);\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          // $FlowIgnore\n          this.raise(errorTemplate, { at: startLoc }, modifier);\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              TSErrors.UnsupportedSignatureParameterKind,\n              { node: pattern },\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              node: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            node: elementNode,\n          });\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            node: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { node: type });\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          Errors.InvalidEscapedReservedWord,\n          { at: this.state.lastTokStartLoc },\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(\n          TSErrors.EmptyHeritageClauseType,\n          { at: originalStartLoc },\n          descriptor,\n        );\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          node: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { node: pp });\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { node });\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            node: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorLoc = this.state.curPosition();\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      // tsTryParseAndCatch is expensive, so avoid if not necessary.\n      // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n      // Also handles `new C<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArgumentsInExpression();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: Position, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          node: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { node: member });\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            TSErrors.IndexSignatureHasAccessibility,\n            { node: member },\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { node: member });\n        }\n        if ((member: any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { node: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          node: member,\n        });\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { node: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { node: methodOrProp });\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { node: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          TSErrors.AbstractPropertyHasInitializer,\n          { at: this.state.startLoc },\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { node });\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          TSErrors.PrivateElementHasAccessibility,\n          { node },\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          node: typeParameters,\n        });\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { node: method }, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { node: param });\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(Errors.InvalidLhs, { node: expr }, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          node: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n                node: expr,\n              });\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            node,\n          });\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            TSErrors.AbstractMethodHasImplementation,\n            { node: method },\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"placeholders\",\n);\n/* eslint-disable sort-keys */\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: PrivateName, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  +parsePrivateName: () => PrivateName\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            Errors.InvalidParenthesizedAssignment,\n            node.loc.start,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { node: prop.key },\n      );\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raise(Errors.RestTrailingComma, { node: prop });\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc?: ?Position,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raise(Errors.RestTrailingComma, { node: elt });\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            { node: expr },\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(Errors.ParamDupe, { node: expr });\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(Errors.LetInLexicalBinding, { node: expr });\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.loc.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(Errors.InvalidPropertyBindingPattern, {\n            node: expr,\n          });\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          { node: expr },\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(Errors.InvalidRestAssignmentPattern, {\n        node: node.argument,\n      });\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\ndeclare var invariant;\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { node: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { node: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, { node: left }, value);\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  Errors.PipeBodyIsTighter,\n                  { at: this.state.startLoc },\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        Errors.PipeUnparenthesizedBody,\n        { at: startLoc },\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        node: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startLoc, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, optionalChainMember);\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          Errors.ImportCallArity,\n          { node },\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { node: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { node: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          Errors.PrivateInExpectedIn,\n          { at: this.state.startLoc },\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        Errors.PipeTopicUnconfiguredToken,\n        { at: startLoc },\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        Errors.UnsupportedMetaProperty,\n        { node: node.property },\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(SourceTypeModuleErrors.ImportMetaOutsideModule, {\n          node: id,\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        val,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { node: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { node: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: explain\n          at: createPositionWithColumnOffset(startLoc, 2),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { node: prop });\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(\n            Errors.AccessorIsGenerator,\n            { at: this.state.curPosition() },\n            keyName,\n          );\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { node: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { node: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaLoc: ?Position,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaLoc: ?Position,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaLoc, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorOrigin =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? { at: node.key.loc.end }\n                : { node };\n\n            this.raise(Errors.IllegalLanguageModeDirective, errorOrigin);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(\n          Errors.UnexpectedToken,\n          { at: this.state.curPosition() },\n          \",\",\n        );\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError(\n        Errors.AwaitBindingIdentifier,\n        startLoc,\n      );\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, { at: startLoc }, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, { at: startLoc }, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.loc.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name, loc] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at: loc }, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(SourceTypeModuleErrors.ImportOutsideModule, { node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        Errors.IllegalBreakContinue,\n        { node },\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { node: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { node: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, { node: expr }, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: ?Position,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        Errors.ForInOfLoopInitializer,\n        { node: init },\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, { node: init }, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              Errors.DeclarationMissingInitializer,\n              { at: this.state.lastTokEndLoc },\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            Errors.DeclarationMissingInitializer,\n            { at: this.state.lastTokEndLoc },\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { node: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassProperty> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateProperty> = member;\n    const accessorProp: $FlowSubtype<N.ClassAccessorProperty> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          node: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { node: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { node: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { node: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { node: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { node: member });\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { node: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = (prop.key: N.Expression);\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { node: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              node: declaration,\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                Errors.ExportBindingIsString,\n                { node: specifier },\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        { node },\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          Errors.ModuleExportNameHasLoneSurrogate,\n          { node: result },\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { at: this.state.startLoc },\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          Errors.ModuleAttributeDifferentFromType,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          Errors.ModuleAttributesWithDuplicateKeys,\n          { node: node.key },\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          Errors.ImportBindingIsString,\n          { node: specifier },\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","get","key","Object","keys","getPluginOption","plugin","name","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","start","CommentsParser","addComment","comment","filename","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","end","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","code","templates","forEach","template","ParserError","raise","origin","raiseWithData","at","raiseOverwrite","pos","index","message","replace","_","line","column","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","defineProperty","toUnenumerable","object","enumerable","value","toESTreeLocation","superClass","parse","file","tokens","map","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","parseBlockBody","args","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","Errors","finishCallExpression","optional","callee","source","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","endLoc","resetEndLocation","lastTokEndLoc","TokContext","constructor","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","Position","col","SourceLocation","identifierName","createPositionWithColumnOffset","position","columnOffset","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","nextToken","eat","match","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","unexpected","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","containsInvalid","inTemplate","codePos","substr","octalStr","octal","codeLoc","n","firstCode","escStart","identifierCheck","esc","keywordTypes","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStartLoc","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","trailingComma","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceholderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","last","isLast","checkToRestConversion","arg","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","SourceTypeModuleErrors","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorOrigin","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}
>>>>>>> f8201306ba786516c9825d88012c1e0b5966996d
